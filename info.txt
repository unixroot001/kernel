
------------------------------------------------------------------------------------------------------

        .######..##..##..######...####...#####...##...##...####...######..######...####....####..
        ...##....###.##..##......##..##..##..##..###.###..##..##....##......##....##..##..##..##.
        ...##....##.###..####....##..##..#####...##.#.##..######....##......##....##.###..######.
        ...##....##..##..##......##..##..##..##..##...##..##..##....##......##....##..##..##..##.
        .######..##..##..##.......####...##..##..##...##..##..##....##....######...#####..##..##.
        .........................................................................................
______________________________________________________________________________________________________



        









__________________________________________________________________

              📌 🄸🄽🄵🄾🅁🄼🄰🅃🄸🅀🄰 🄰🄽🄳 🄰🄻🄶🄾🅁🄸🅃🄷🄼🅂/🄳🄰🅃🄰 🅂🅃🅁🅄🄲🅃🅄🅁🄴
             _______________________________________________________________________________


Информáтика (фр. Informatique; англ. Computer science) — наука о методах и процессах [сбор, создание,
хранения, обработки, передачи, кодирование, анализа, ввод/вывод, чтение/запись] >> числовой, текстовой, 
графической, звуковой, видео информации/данных с применением компьютерных технологий, обеспечивающих 
возможность её использования для принятия решений [информатика ученые site:google.com]        
```````
Электро́нно-вычисли́тельная маши́на (сокращённо ЭВМ) — комплекс технических, аппаратных и программных средств, предназначенных для автоматической обработки информации, вычислений, автоматического управления. 
```````
>_Предметом изучения информатики являются именно  <'Данные'> методы их создания, хранения, обработки и передачи
>_ Компьютер(ЭВМ)- Электро́нно-вычисли́тельная маши́на для обработки данных/информации
>_Данные — поддающееся многократной интерпретации представление информации в пригодном для обработки или передачи 
>_Фу́нкция(действие) или алгоритмы — фрагмент программного кода, к которому можно обратиться из другого места программы
>_Для управление сложностями системы используеться >> Информационные процессы, Алгоритмы и Структуры Данных, События, Данные и Функция, OOP[class, object]{свойство и методы}, Абстракция, Файлы, Документация, Cистемный подход, 20/80
-------------------------------------------------------------------------------
            🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂
-------------------------------------------------------------
 programming  = Инструкция и Данные 
                [ algorithms and data structure ]
                [ syntax lang: функция, ветвление, цикл ] 
                [ library ]
                - - - - - -                             
inst:  [ unix-shell, python, html, js, xml, java, sql ]> tcp/ip >> C++             
-----------------------------------------------------------------------

---------------------------------------------------
system  =  [
                kernel* [ Cистемные вызовы, микропрограммы ]
                system library [ .dll, .so ] | [ .py, .pyc]
                shell  and utils    
                    ————————————————————

  OS: [ 'Linux' 'Android' 'Windows' 'ChromeOS' 'RouterOS' ]
 *[ Cистемные вызовы, Драйверы, Процессы и потоки, Демоны, 
 Управление памятью, Многозадачность, Файлы и Файловые системы,           
  Ввод и вывод информации(I/O), Виртуализация и Облако ]
--------------------------------------------------

----------------------------------------------------------
net   =   [   model OSI, model TCP/IP  ]
              ——————————————————————               
        inst: aktiv: [ 'net adapter' 'router' 'switch' 'hub' 'repeater' ]
        passive: ['UTP'  'FTP'  'Optic Cable']
--------------------------------------------------------------------

-------------------------------------------------------------------------
• Architecture ЭВМ   =   [
                       1| Цифровой логический уровень это аппаратное обеспечение машины, состоящий из вентилей;
                       2| Микроархитектурный уровень;
                       3| Уровень архитектуры системы команд, трансляция (ассемблер);
                       4| Уровень операционной системы, трансляция (ассемблер);
                       5| Уровень языка ассемблера, трансляция (компилятор);
                       6| Язык высокого уровня
  [CPU, RAM, HDD, GPU, motherboard] ] [Арифметика-Логичесские операции]——————————————————
 Фон Неймановская архитектура —  характерной чертой является совместное хранение программ и данных

-------------------------------------------------------------------------

* [  'motix' 'google' 'wikipedia' 'gnu.org' 'android.com' 'github'  'stackexcange'  'python.org' 
        'developer.mozilla.org' 'html5book.ru' 'discovery' 'natgeowild' 'nasa' 'who.int' ]
* [  'Terminal' 'Sublime Text' 'VirtualBox' 'MS Office'  'Adobe' 'ChromeOS' 'Autodesk', 'Apache' 'СУБД' 
        post: ['Outlook' 'sendmail' 'Excenge Server' ] 'Google and YandeX service' ]
* [  'file server' 'web server' 'post server' 'client-server' 'database' ] 

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     Большинству программистов, интересен только самый верхний уровен,который меньше всего сходен с 
машинным языком. Однако те, кто хочет понять, как работает компьютер,должны изучить все уровни.(Э.Таненбаум) 
==>> Можно обучиться конкретному языку и инструментам, а потом всю жизнь фильтровать резюме по куче ключевых слов. 
А можно понять основные алгоритмы программ -[Информационные процессы над данными]-, структуры, конструкции
и тогда все языки будут восприниматься только с точки зрения удобства применения под конкретную задачу.
Когда научитесь выстраивать свое мышление в виде алгоритмов >> то язык программирование будеть всего лишь инструментом
Программирование == не в синтаксисе языка, а именно в Алгоритмах и Структуры данных (Т.Хирьянов, Н.Вирт)
Алгоритмы + Структуры данных = Программа (Н.Вирт) [чтение и запись исходного кода (Э.Рэймонд)]_________
Программист в первую очередь должен уметь анализировать и решать проблемы – это основной навык, которым должны обзавестись выпускники факультетов информатики. Написание кода – это просто необходимый инструмент, 
который используется для решения задач
==>> ядро info = [Algorithms and Data structure, arhitecture ЭВМ, system and network] (Б.Cтраутруп C++)
==>> Важный ресурс программиста = Концентрация внимания | Решение => ООП 
 __________________Важно! Надо изучить _задачу_ а не инструмент ________________
___________________________________________________________________________________________


*******************************************************************

  Обработка информации                          Сбор информации        
                  \                           /
                   \ _______________________ /

                |🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂|
                     _______________________ 
                   /           |             \
                  /            |              \
  Хранение                Передача              Кодирование
  информации              информации            информации


******************************************************************

              📌Информатика
  Информация        |        Действие(обработка)
              Программирование
  Данные            |        Функция
              Структурирования
  Структуры данных  |        Алгоритмы 
              ООП{классы и обьекты}
  Свойство          |        Методы


******************************************************************
















********************************************************************************************

                 🄸🄽🄵🄾🅁🄼🄰🅃🄸🅀🄰

  Информáтика (фр. Informatique; англ. Computer science) — наука о методах и процессах [сбора, создание,
[хранения и обработки], передачи, анализа и оценки >>_ числовой, [текстовой и графической], звуковой, 
видео информации] с применением компьютерных технологий, обеспечивающих возможность её использования для 
принятия решений

``````````````````````````````````````````````````````````````````````````````````````````````````````` 

  Как дисциплина, информатика охватывает широкий круг тем, от теоретических исследований алгоритмов и ограничений 
вычислений до практических вопросов реализации вычислительных систем в аппаратном и программном обеспечении. [56]  
CSAB , ранее называвшаяся Аккредитационным советом по вычислительным наукам, в который входят представители 
Ассоциации вычислительной техники (ACM) и IEEE Computer Society (IEEE CS) [58], определяет четыре области, 
которые она считает критически важны для дисциплины информатики: 

  * алгоритмы и структуры данных, 
  * методология и языки программирования 
  * архитектура ЭВМ

В дополнение к этим четырем областям CSAB также определяет такие области, как   
  * Операционные системы
  * компьютерные сети
  * разработка программного обеспечения, 
  * искусственный интеллект  
  * системы баз данных 
  * компьютерная графика



______________________________________________________________________________


  Информатика есть наука, служащая информационным технологиям. Но Фундаментальными достижениями 
этой науки оказались не сами технологии, а общие методы построения систем и решения _Cложных_Задач_. 
Базисом этих методов являются алгоритмы и системный подход к решению задач. Поэтому информатика 
развивает алгоритмическое мышление и учит системному подходу к решению задач.

  Информационные технологии призваны, основываясь и рационально используя современные достижения 
в области компьютерной техники и иных высоких технологий, новейших средств коммуникации, 
программного обеспечения и практического опыта, решать задачи по эффективной организации 
информационного процесса для снижения затрат времени, труда, энергии и материальных ресурсов 
во всех сферах человеческой жизни и современного общества.
```
  Информатик - ученый, изучающий информатику, теоретическую основу информации и вычислений и их применение.
  Информатики, как правило, работают с теоретической стороны компьютерных систем, в отличие от 
аппаратной части, на которой в основном сосредоточены компьютерные инженеры (хотя они частично совпадают). 
Хотя информатики также могут сосредоточить свою работу и исследования в конкретных областях 
(например, алгоритмы и структуры данных, разработки программного обеспечения, теории информации, 
теории баз данных, теории языка программирования, компьютерной графики и компьютерного зрения), 
их основой является теоретическое исследование вычислительной техники, из которого вытекают эти другие области.

  Основная задача информатиков - разработать или проверить модели, часто математические по своей природе, 
для описания свойств компьютерных систем (процессоры, программы, компьютеры взаимодействующие с людьми, 
компьютеры взаимодействующие с другими компьютерами и т. д.) который дает полезные преимущества 
(быстрее, меньше, дешевле, точнее и т. д.)



-------------------------------------------------------------------------




------------- 📌ИНФОРМАЦИЯ --------------------


  Информа́ция (от лат. informātiō «разъяснение, представление, понятие о чём-либо») — сведения 
независимо от формы их представления, совокупность данных, зафиксированных на материальном носителе, 
а так же устных данных, сохранённых и распространённых во времени и пространстве.
Сведения об окружающем мире и протекающих в нем процессах, воспринимаемые человеком или специальным устройством.
Сообщения, осведомляющие о положении дел, о состоянии чего-нибудь. (Научно-техническая и газетная информации, 
средства массовой информации — печать, радио, телевидение, кино).

  С появлением компьютеров (или, как их вначале называли в нашей стране, ЭВМ — электронные вычислительные машины)  
вначале появилось средство для обработки числовой информации. Однако в дальнейшем, особенно после широкого распространения персональных компьютеров (ПК), компьютеры стали использоваться для хранения, обработки, 
передачи и поиска текстовой, числовой, изобразительной, звуковой и видеоинформации. С момента появления первых персональных компьютеров — ПК (80-е годы 20 века) — до 80 % их рабочего времени посвящено работе с текстовой информацией.



-------------КЛАССИФИКАЦИЯ ИНФОРМАЦИИ--------------------


Информацию можно разделить на виды по различным критериям:

По способу восприятия:

  * Визуальная — воспринимаемая органами зрения.
  * Звуковая — воспринимаемая органами слуха.
  * Тактильная — воспринимаемая тактильными рецепторами.
  * Обонятельная — воспринимаемая обонятельными рецепторами.
  * Вкусовая — воспринимаемая вкусовыми рецепторами.

По форме представления:
  * Текстовая — передаваемая в виде символов, предназначенных обозначать лексемы языка.
  * Числовая — в виде цифр и знаков (символов), обозначающих математические действия.
  * Графическая — в виде изображений, предметов, графиков.
  * Звуковая — устная или в виде записи и передачи лексем языка аудиальным путём.
  * Видеоинформация — передаваемая в виде видеозаписи.

По назначению:
  * Массовая — содержит тривиальные сведения и оперирует набором понятий, понятным большей части социума.
  * Специальная — содержит специфический набор понятий, при использовании происходит передача сведений, которые могут быть не понятны основной     массе социума, но необходимы и понятны в рамках узкой социальной группы, где используется данная информация.
  * Секретная  — передаваемая узкому кругу лиц и по закрытым (защищённым) каналам.    
  * Личная (приватная) — набор сведений о какой-либо личности, определяющий социально е положение и типы социальных взаимодействий внутри популяции.

По значению:
  * Актуальная — информация, ценная в данный момент времени.
  * Достоверная — информация, полученная без искажений с надежных источников.
  * Понятная — информация, выраженная на языке, понятном тому, кому она предназначена.
  * Полная — информация, достаточная для принятия правильного решения или понимания.
  * Ценная — полезность информации определяется субъектом, получившим информацию в зависимости от объёма возможностей её использования.

По истинности:
  * Истинная.
  * Ложная.


------- 📌ДАННЫЕ [data] ----------

=> Данные представляют собой информацию в формализованном виде (в цифровой форме), 
позволяющем автоматизировать её сбор, хранение и дальнейшую обработку в ЭВМ. 
С этой точки зрения информация является абстрактным понятием, рассматриваемым безотносительно 
к её семантическому аспекту, а под количеством информации обычно понимается 
соответствующий объём данных. Однако одни и те же данные могут быть закодированы различным 
образом и иметь при этом различный объём, поэтому иногда рассматривается также понятие 
«ценность информации», которое является предметом изучения теории информации.

=> Данные eng. data — поддающееся многократной интерпретации представление информации в 
формализованном виде, пригодном для передачи, связи, или обработки (ISO/IEC 2382-1:1993)[1].

  Для долговременного хранения данных обычно используются базы данных. Данные в памяти могут быть 
организованы в различные виды структур данных, таких как массивы, связанные списки или объекты. 
Структуры данных могут хранить данные различных типов, включая числа, строки и другие структуры данных. 
Ввод и вывод данных в компьютеры производится через периферийные устройства.

  В вычислительной технике данные обычно отличают от программ. Программа представляет собой набор данных, 
содержащих последовательность инструкций, исполняемых компьютером и детализирующих вычисление или задачу. 
Согласно принципу фон Неймана, имеющему место в большинстве современных компьютеров, одна и та же область 
памяти может содержать как программу (в частности, машинный код), так и иные данные, то есть и то и другое 
выражается в виде одинаковых информационных форм, как правило, в виде двоичного кода.

  В языках высокого уровня данные некоторых типов хранятся в переменных.

-----------------------------------------------------------------------------------


  ИНФОРМАЦИОННЫЕ ПРОЦЕССЫ

  Информационный процесс — процесс получения, создания, сбора, обработки, накопления, хранения, 
поиска, передача и использования информации.
В целом, любые действия, выполняемые с информацией, называются информационными процессами.


*******************************************************************

  Обработка информации                          Сбор информации        
                  \                           /
                   \ _______________________ /

                |🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂|
                     _______________________ 
                   /           |             \
                  /            |              \
  Хранение                Передача              Кодирование
  информации              информации            информации



******************************************************************



  ОБРАБОТКА ИНФОРМАЦИИ

  Обработка информации — вся совокупность операций (сбор, ввод, запись, преобразование, считывание, 
хранение, уничтожение, регистрация), осуществляемых с помощью технических и программных средств, 
включая обмен по каналам передачи данных. 🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂

  Функции обработки данных 
  Обработка данных может включать в себя различные процессы, в том числе:
Проверка - обеспечение правильности и актуальности предоставленных данных.
Сортировка - «расположение предметов в некоторой последовательности и / или в разных наборах».
Обобщение (статистическое) или (автоматическое) - сведение подробных данных к основным моментам.
Агрегация - объединение нескольких частей данных.
Анализ - «сбор, организация , анализ, интерпретация и представление данных».
Отчетность - список подробных или сводных данных или расчетной информации.
Классификация - разделение данных на различные категории.


--------------------------------------------------------------

  СБОР ИНФОРМАЦИИ

  Сбор данных — это процесс сбора информации и измерения целевых показателей в сложившейся системе, 
который впоследствии позволяет ответить на актуальные вопросы и оценить полученные результаты. 
Сбор данных является частью исследований во всех областях познания, включая физику, общественные науки, 
гуманитарные науки и бизнес. Хотя методы различны для разных дисциплин, упор на обеспечение точной и 
правдивой информации остаётся тем же самым. Целью всего сбора данных служит получение свидетельства 
о качестве данных, что позволяет при анализе дать убедительные и надёжные ответы на поставленные вопросы.

--------------------------------------------------------------
  ХРАНЕНИЕ И ВЫПОЛНЕНИЕ:

  До момента, когда пользователь компьютера явно или неявно выдаст запрос на выполнение компьютерной программы, 
она обычно хранится в энергонезависимой памяти. При получении такого запроса программа посредством другой 
компьютерной программы, называющейся операционной системой, загружается в память с произвольным доступом, 
откуда её непосредственно может выполнять центральный процессор. После этого центральный процессор выполняет 
программу, инструкция за инструкцией, до её завершения. Выполняющаяся программа называется процессом[6]. 
Завершение программы происходит либо по достижению её последней инструкции (обычно передающей управление 
операционной системе) либо по ошибке, программной или аппаратной

  Большинство пользователей компьютеров используют программы, предназначенные для выполнения конкретных 
прикладных задач, таких, как подготовка и оформление документов, математические вычисления, 
обработка изображений и т. п. Соответствующие программные средства называют прикладными 
программами или прикладным программным обеспечением. Управление компонентами вычислительной
системы и формирование среды для функционирования прикладных программ берёт на себя 
системное программное обеспечение, наиболее важной составляющей которого является операционная система.

`````````````````````

	Как хранится информация

	Компьютеру абсолютно безразлично, чем именно мы забиваем винчестер — документами ли,
музыкой или картинками. Для него все это — информация, которую нужно лишь разбить на
определенные кусочки — и в любой момент знать, где именно находится тот или иной кусочек.
	
	Файл в переводе с английского — это просто лист, на котором может быть записана некая
информация. Неважно, что это — код программы или созданный вами текст. Важно другое —
что каждый такой листок является чем-то логически завершенным, законченным. Имя файла
чаще всего может быть выбрано произвольно самим пользователем. Скажем, вы создали
Файл-документ с текстом своего договора с фирмой — его можно назвать «Договор»,
«Документ 4155» или вообще «Апрельские тезисы». Раньше, в эпоху DOS, имена файлов могли
состоять максимум из восьми букв латинского алфавита — сегодня их может быть до 256 и
никаких языковых ограничений не осталось. Работая с русской версией Windows, мы можем
давать нашим документам-файлам русские имена, а китайцы, к примеру, могут с легкостью
использовать свои иероглифы. В компьютерном мире существует бесчисленное множество
расширений — запомнить все просто нереально. Однако основных расширений не так уж
много:
------------------
• ехе — обозначает «исполняемый» файл, хранящий в себе программу. Например, winword.exe;
• com — другой тип программного файла. Обычно файлы.com соответствуют небольшим (до
сотни килобайт) программкам. Часто встречались в эпоху DOS, однако сегодня практически не
применяются;
• bat — так называемый «пакетный файл», предназначенный для последовательного запуска
нескольких программ. По сути дела, это обычный текстовый файл, в котором набраны
названия программных файлов, которые вы хотите выполнить, в необходимом вам порядке.
Пример — файл autoexec.bat, автоматически выполняющийся в момент загрузки компьютера;
• cfg — конфигурационный файл, в котором программа указывает параметры своей работы;
• dll — так называемая «динамически подключающаяся библиотека» данных, к которой могут
обратиться по мере надобности сразу несколько программ;
• hip — файл справки, в котором хранятся «подсказки», а иногда — и полное руководство по
той или иной программе;
• txt, doc — текстовые файлы;
• htm, html — гипертекстовый документ Интернета;
• xls — электронная таблица;
• dat — файл данных;
• mp3 — звук в цифровом формате;
• brap, jpg — графическая информация, картинки;
• arj, zip, rаr, 7z — файлы «архивов».
------------

	Есть у файла и еще один признак, называемый атрибутом. Однако, в отличие от имени и
расширения, его-то пользователь как раз и не видит. Зато великолепно видит и понимает
компьютер. Вот лишь некоторые из этих атрибутов:

	- Скрытый (Hidden). Файлы с этими атрибутами обычно не видны пользователю. Для
перестраховки — как правило, файлы эти весьма важные для функционирования системы.
Хотя опытному пользователю не составит труда настроить программу просмотра файлов
(файловый менеджер) таким образом, что все скрытые файлы будут видны как на ладони.
	- Только для чтения (Read-Only). А вот эти файлы всегда открыты. Но и только. Изменить
их содержание нельзя — по крайней мере, без специальной команды пользователя, чтобы
последний был полностью уверен в том, что именно он делает.
	- Системный (System). Этим атрибутом, как особым знаком отличия, отмечены самые
важные файлы в операционной системе, отвечающие за загрузку компьютера. Их
повреждение или удаление всегда влечет за собой самые тяжкие последствия — поэтому
щедрый компьютер, не скупясь, «награждает» их заодно и двумя предыдущими атрибутами —
«только для чтения» и «скрытый».
	- Архивный (Archive). Этот атрибут устанавливается обычно во время работы с файлом, при
его изменении. По окончании сеанса работы он, как правило, снимается.
Файлы объединены в особые структуры — папки. Или — каталоги. Или — директории. Или —
фолдеры.
	Папка — самый поздний термин и, наверное, самый удачный. Обычно каждый программный
пакет, установленный на вашем компьютере, занимает свою, отдельную папку. Как отличить
папку от файла? Не так уж и сложно. Во-первых, папки не имеют расширения и обозначаются
в Windows особыми значками — как раз в виде открывающейся папки. Во-вторых, в
отношении папки нельзя применить операции редактирования.

-----------------------------------------------------------------

  ПЕРЕДАЧА ИНФОРМАЦИИ

  Передача информации — физический процесс, посредством которого осуществляется перемещение знаков 
(сведений, способных предоставлять информацию) в пространстве или осуществляется физический доступ 
субъектов к знакам.

  Передача данных (обмен данными, цифровая передача, цифровая связь) — физический перенос данных 
(цифрового битового потока) в виде сигналов от точки к точке или от точки к нескольким точкам 
средствами электросвязи по каналу передачи данных, как правило, для последующей обработки средствами 
вычислительной техники. Примерами подобных каналов могут служить медные провода, ВОЛС, беспроводные 
каналы передачи данных или запоминающее устройство.

-------------------------------------------------------------------------------

  КОДИРОВАНИЯ ИНФОРМАЦИИ

  Кодирования информации - процесс преобразования данных из формы, удобной для непосредственного 
использования, в форму, удобную для передачи, хранения, автоматической обработки

************************************************************************************************



















































































































__________________________________________________________________________________________________




██████╗ ██████╗  ██████╗  ██████╗ ██████╗  █████╗ ███╗   ███╗███╗   ███╗██╗███╗   ██╗ ██████╗ 
██╔══██╗██╔══██╗██╔═══██╗██╔════╝ ██╔══██╗██╔══██╗████╗ ████║████╗ ████║██║████╗  ██║██╔════╝ 
██████╔╝██████╔╝██║   ██║██║  ███╗██████╔╝███████║██╔████╔██║██╔████╔██║██║██╔██╗ ██║██║  ███╗
██╔═══╝ ██╔══██╗██║   ██║██║   ██║██╔══██╗██╔══██║██║╚██╔╝██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║
██║     ██║  ██║╚██████╔╝╚██████╔╝██║  ██║██║  ██║██║ ╚═╝ ██║██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝
╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝ 
                                                                                              

__________________________________________________________________________________________________

  =======>>📌 🄰🄻🄶🄾🅁🄸🅃🄷🄼🅂 🄰🄽🄳 🄳🄰🅃🄰 🅂🅃🅁🅄🄲🅃🅄🅁🄴 <<==========
                      
     Программирование = Данные и Методы их обработки(инструкция/данные)
__________________________________________________________________________________________________




******************************************************************

  Cинтаксис ЯП                                  Алгоритмы и структуры данных
                  \                           /
                   \ _______________________ /

                     |   ПРОГРАММИРОВАНИЕ  |
                     _______________________ 
                   /           |             \
                  /            |              \
  Прикладные                 Практика             Дизайн ПО
  Библиотеки              программирование        Группавая работа


-******************************************************************

 


******************************************************************

  Обработка информации                          Сбор информации        
                  \                           /
                   \ _______________________ /

                |🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂|
                     _______________________ 
                   /           |             \
                  /            |              \
  Хранение                Передача              Кодирование
  информации              информации            информации



******************************************************************

              📌Информатика
  Информация        |        Действие(обработка)
              Программирование
  Данные            |        Функция
              Структурирования
  Структуры данных  |        Алгоритмы 
              ООП{классы и обьекты}
  Свойство          |        Методы

******************************************************************














  ===============>> 📌_Алгори́тмы и Структуры данных <<==============
__________________________________________________________________


  Алгори́тм (лат. algorithmi — от имени среднеазиатского математика Аль-Хорезми[1]) — конечная совокупность 
точно заданных правил решения некоторого класса задач или набор инструкций, описывающих порядок действий 
исполнителя для решения определённой задачи.

  Для разработки алгоритмов и программ используется алгоритмизация — процесс систематического составления 
алгоритмов для решения поставленных прикладных задач. Алгоритмизация считается обязательным этапом в процессе 
разработки программ и решении задач на ЭВМ.

  Часто в качестве исполнителя выступает компьютер, но понятие алгоритма необязательно относится к 
компьютерным программам, так, например, чётко описанный рецепт приготовления блюда также является алгоритмом, 
в таком случае исполнителем является человек (а может быть и некоторый механизм, например ткацкий или токарный 
станок с числовым управлением, и пр.).

  Можно выделить алгоритмы вычислительные, и управляющие. Вычислительные, по сути, преобразуют некоторые 
начальные данные в выходные, реализуя вычисление некоторой функции

------------------------------------------------------

  Машина Тьюринга

  Схематическая иллюстрация работы машины Тьюринга.
Основная идея, лежащая в основе машины Тьюринга, очень проста. Машина Тьюринга — это абстрактная машина 
(автомат), работающая с лентой отдельных ячеек, в которых записаны символы. Машина также имеет головку 
для записи и чтения символов из ячеек, которая может двигаться вдоль ленты. На каждом шаге машина считывает 
символ из ячейки, на которую указывает головка, и, на основе считанного символа и внутреннего состояния, 
делает следующий шаг. При этом машина может изменить своё состояние, записать другой символ в ячейку или 
передвинуть головку на одну ячейку вправо или влево.[8]

На основе исследования этих машин был выдвинут тезис Тьюринга (основная гипотеза алгоритмов):

Некоторый алгоритм для нахождения значений функции, заданной в некотором алфавите, существует тогда и только тогда, когда функция исчисляется по Тьюрингу, то есть когда её можно вычислить на машине Тьюринга.

Этот тезис является аксиомой, постулатом, и не может быть доказан математическими методами, поскольку алгоритм не является точным математическим понятием.

--------------------------------------------------------------

  Виды алгоритмов

  Виды алгоритмов как логико-математических средств отражают указанные компоненты человеческой деятельности и 
тенденции, а сами алгоритмы в зависимости от цели, начальных условий задачи, путей её решения. Следует подчеркнуть принципиальную разницу между алгоритмами вычислительного характера, преобразующими некоторые входные данные 
в выходные (именно их формализацией являются упомянутые выше машины Тьюринга, Поста, РАМ, нормальные алгорифмы 
Маркова и рекурсивные функции), и интерактивными алгоритмами (уже у Тьюринга встречается C-машина, от англ. choice — выбор, ожидающая внешнего воздействия, в отличие от классической A-машины, где все начальные данные заданы до начала вычисления и выходные данные недоступны до окончания вычисления). Последние предназначены для взаимодействия 
с некоторым объектом управления и призваны обеспечить корректную выдачу управляющих воздействий в зависимости от складывающейся ситуации, отражаемой поступающими от объекта управления сигналами[15][16]. В некоторых случаях 
алгоритм управления вообще не предусматривает окончания работы (например, поддерживает бесконечный цикл ожидания событий, на которые выдается соответствующая реакция), несмотря на это, являясь полностью правильным.

  Можно также выделить алгоритмы:

• Механические алгоритмы, жесткие (например, алгоритм работы машины, двигателя) —
задают определённые действия, обозначая их в единственной и достоверной последовательности, обеспечивая тем 
самым однозначный требуемый результат.
• Гибкие алгоритмы, например, стохастические, то есть вероятностные и эвристические.
• Вероятностный (стохастический) алгоритм даёт программу решения задачи несколькими путями или способами, 
приводящими к вероятному достижению результата.
• Эвристический алгоритм.
• Линейный алгоритм — набор команд (указаний), выполняемых последовательно во времени друг за другом.
• Разветвляющийся алгоритм — алгоритм, содержащий хотя бы одно условие, в результате проверки которого может осуществляться разделение на несколько альтернативных ветвей алгоритма.
• Циклический алгоритм — алгоритм, предусматривающий многократное повторение одного и того же действия (одних и тех же операций). К циклическим алгоритмам сводится большинство методов вычислений, перебора вариантов. 
• Вспомогательный (подчинённый) алгоритм (процедура)
• Структурная блок-схема, граф-схема алгоритма — графическое изображение алгоритма
• Рекурсивные алгоритмы
• Динамическое программирование в теории управления и теории вычислительных систем — способ решения сложных задач 
путём разбиения их на более простые подзадачи
• Структу́рное программи́рование
• Разделяй и властвуй
• CRUD

Для каждой задачи может существовать множество алгоритмов, приводящих к цели

 В зависимости от того в какой последовательности исполняються предписание (команды) 
алгоритма, выделяють следующие типы алгоритмов:
  * Линейные алгоритмы;
  * Алгоритмы с ветвлениями;
  * Алгоритмы с повторениеми;
  * Алгоритмы с ветвлениями и повторениями;
На практике сложные алгоритмы являються алгоритмы с ветвлениями и повторениями

----------------------------------------------------------------

  Пример
  Алгоритм Евклида — эффективный метод вычисления наибольшего общего делителя (НОД). Назван в честь 
греческого математика Евклида; один из древнейших алгоритмов, который используют до сих пор[28].

Описан в «Началах» Евклида (примерно 300 лет до н. э.), а именно в книгах VII и X. В седьмой книге 
описан алгоритм для целых чисел, а в десятой — для длин отрезков.

Существует несколько вариантов алгоритма, ниже записанный в псевдокоде рекурсивный вариант:

функция нод(a, b)
    если b = 0
       возврат a
    иначе
       возврат нод(b, a mod b)

Запишем алгоритм создания бумажного делового письма с помощью текстового редактора Word:

Алгоритм создания Делового письма:
1.Включить компьютер.
2.Загрузить текстовый редактор Word.
3.Загрузить шаблон делового письма
4.Заполнить шаблон своими данными
5.Сохранить письмо в файле на диске
6.Распечатать письмо на принтере
7.Завершить работу всех программ, операционный системы
и выключить компьютер



-------------------------------------------------------------

  Реше́ние зада́ч_____
  
  Реше́ние зада́ч — процесс выполнения действий или мыслительных операций, направленный на достижение цели, 
заданной в рамках проблемной ситуации — задачи; является составной частью мышления. С точки зрения 
когнитивного подхода процесс решения задач является наиболее сложной из всех функций интеллекта и определяется 
как когнитивный процесс более высокого порядка, требующий согласования и управления более элементарными или 
фундаментальными навыками.[1]



>>>Стадии решения задачи 
Процесс решения задачи состоит:

Обнаружение проблемной ситуации;
Постановка задачи: выявление и более или менее строгое определение исходного (данного) — его элементов 
и отношений между ними — и требуемого (цели);
Нахождение решения задачи.

------------------------------------------------

Промежуточный итог

Программист в первую очередь должен уметь анализировать и решать проблемы 
– это основной навык, которым должны обзавестись выпускники 
факультетов информатики. Написание кода – это просто необходимый
инструмент, который используется для решения задач


------------------------------------------------











_________________________________________________________________________


  ===============>> 📌_Структуры данных <<==============

  Структура данных (англ. data structure) — программная единица, позволяющая хранить и обрабатывать 
множество однотипных и/или логически связанных данных в вычислительной технике. Для добавления, поиска, 
изменения и удаления данных структура данных предоставляет некоторый набор функций, составляющих её интерфейс.

  Структуры данных формируются с помощью типов данных, ссылок и операций над ними в выбранном языке 
программирования.

  Различные виды структур данных подходят для различных приложений; некоторые из них имеют узкую с
пециализацию для определённых задач. Например, B-деревья обычно подходят для создания баз данных, 
в то время как хеш-таблицы используются повсеместно для создания различного рода словарей, например, 
для отображения доменных имён в интернет-адресах компьютеров.

  Фундаментальными строительными блоками для большей части структур данных являются массивы, записи 
(struct в Си и record в Паскале), размеченные объединения (union в Си) и ссылки. Например, двусвязный 
список может быть построен с помощью записей и ссылок, где каждая запись (узел) будет хранить данные 
и ссылки на «левый» и «правый» узлы.

Типы данных 

Примитивные типы 

• Логическое , истина или ложь.
Характер
• Числа с плавающей запятой , аппроксимация действительных чисел с ограниченной точностью .
Включая , среди прочего, поплавки одинарной и двойной точности IEEE 754
• Числа с фиксированной точкой
• Целочисленные , целочисленные значения или значения с фиксированной точностью
• Ссылка (также называемая указателем или дескриптором), небольшое значение, относящееся к адресу другого 
объекта в памяти, возможно, гораздо большему.
• Перечислимый тип , небольшой набор значений с уникальными именами
• Дата Время , значение, относящееся к дате и времени

Составные типы или непримитивные типы 
• Массив (например, строка, представляющая собой массив символов)
• Запись также называется структурой
• Объединение ( объединение с тегами - это подмножество, также называемое вариантом , вариантной записью, 
размеченным объединением или непересекающимся объединением)

Абстрактные типы данных 
• Контейнер
• Список
• Кортеж
• Ассоциативный массив, Карта
• Multimap
• Установленный
• Мультисет (сумка)
• Куча
• Очередь (пример очереди с приоритетом )
• Двусторонняя очередь
• График (пример Tree , Heap )

````````````````````

>_Python Data Types:

strings:    'computer science'
integer:    10,20,30
float:      3.148999
boolean:    True,false
list:       ['msi', 'info', True]
tuples:     ('msi', 'info', True)
dictrionaries:  {'name': 'max'}
set:        {1,2,3}

******************************************************************










>_Реймонд: Искусство программирования в Unix

Эрик Рэймонд в книге «Искусство программирования в Unix» подытожил философию Unix 
как широко используемую инженерную философию «Делай это проще, глупец» (принцип KISS). Затем он описал, 
как эта обобщённая философия применима в качестве культурных норм Unix:

• Правило модульности:  Пишите простые части, соединяемые понятными интерфейсами.
• Правило ясности:      Ясность лучше заумности.
• Правило композиции:   Разрабатывайте программы так, чтобы их можно было соединить с другими программами.
• Правило разделения:   Отделяйте правила (policy) от механизма (mechanism); отделяйте интерфейс от движка (engine).
• Правило простоты:     Нацельтесь на простоту; добавляйте сложность, только где необходимо.
• Правило экономности:  Пишите большую программу только когда другими средствами выполнить задачу не удастся.
• Правило прозрачности: Разрабатывайте прозрачные программы для облегчения последующего пересмотра и отладки.
• Правило надёжности:   Надёжность — дитя прозрачности и простоты.
• Правило представления: Храните знания в данных так, чтобы логика программы была тупой и надёжной.
• Правило наименьшего удивления: При разработке интерфейса всегда делайте как можно меньше неожиданных вещей.
• Правило тишины:       Если программе нечего сказать, пусть лучше молчит.
• Правило восстановления: Если надо выйти из строя, делайте это шумно и как можно быстрее.
• Правило экономии:     Время программиста дорого; сократите его, используя машинное время.
• Правило генерации:    Избегайте ручного набора кода; при любом удобном случае пишите программы, 
которые бы писали программы.
• Правило оптимизации:  Сначала — опытный образец, потом — «причесывание». Добейтесь стабильной работы, 
только потом оптимизируйте.
• Правило многообразия: Отвергайте все утверждения о «единственно правильном пути».
• Правило расширяемости: Разрабатывайте для будущего. Оно наступит быстрее, чем вы думаете.
• Большинство из этих норм принимается вне сообщества Unix — даже если это было не так во времена, 
когда они впервые были применены в Unix,то впоследствии это стало так. К тому же много правил не являются 
уникальными или оригинальными для сообщества Unix. 
Тем не менее, приверженцы программирования в Unix склоняются к тому, чтобы принять сочетание этих идей в 
качестве основ для стиля Unix.

Цитаты
«Unix прост. Но надо быть гением, чтобы понять его простоту» — Деннис Ритчи.
«Unix не предназначен для ограждения своих пользователей от глупостей, поскольку это оградило бы их и 
от умных вещей» — Дуг Гвин. «Unix никогда не говорит „пожалуйста“» — Роб Пайк.

  



-----------------------------------------------


#Основные элементы блок-схем

 ______
|Начало|      ___|___       начало и конец алгоритма       
   |          |конец|  

-------------------------------------------------
      ____|_____
      |Действие|            выполнения действия
          |                 (например с=a+b)
-------------------------------------------------
           __|__
          /     \           проверка условия(например,)
   да____/условие\___нет    a>b) Если условия выполняеться,
         \_______/          то алгоритм идет по линий <да>,если
          не выполняеться - то по линий <нет>
                  
------------------------------------------------------------------

    _____|________
   / ввод|вывод  /          ввод или вывод данных(например получение
  /_____________/           значения переменной, вывод результата
         |                  на экран монитора

-------------------------------------------------------------------

  __________|_________      Обособленная часть кода.Код выполняеться
  | | Подпрограмма | |      после вызова его по имени.
  ----------|---------

-------------------------------------------------------------------

        ____|______
  _____/   цикл    \___     Повторение ряда действий.Количество повторений  
  |    \___________/        может быть задано заранее или зависеть от
  |    _____|_______        условия выполнения цикла.
  |    | тело цикла|
  |    |___________|
  |_________|




-----------------------------------------------





  
  ------ 📌 Данные -------



  Данные eng. data — поддающееся многократной интерпретации представление информации в 
формализованном виде, пригодном для передачи, связи, или обработки (ISO/IEC 2382-1:1993).

  Для долговременного хранения данных обычно используются базы данных. Данные в памяти могут быть 
организованы в различные виды структур данных, таких как массивы, связанные списки или объекты. 
Структуры данных могут хранить данные различных типов, включая числа, строки и другие структуры данных. 
Ввод и вывод данных в компьютеры производится через периферийные устройства.

  В вычислительной технике данные обычно отличают от программ. Программа представляет собой набор данных, 
содержащих последовательность инструкций, исполняемых компьютером и детализирующих вычисление или задачу. 
Согласно принципу фон Неймана, имеющему место в большинстве современных компьютеров, одна и та же область 
памяти может содержать как программу (в частности, машинный код), так и иные данные, то есть и то и другое 
выражается в виде одинаковых информационных форм, как правило, в виде двоичного кода.

  В языках высокого уровня данные некоторых типов хранятся в переменных.


----------------------------------------------------------------------


    _Организация данных_

  Традиционно применяют два способа организации данных: 

• Tекстовые данные (в файловой системе: текстовый файл, в программировании: строковый тип данных) — 
последовательность символов алфавита, представленная в виде кодировки.(ASCII)
• Двоичные данные — последовательность байтов. «Двоичная» организация не является способом организации данных 
как таковым, а лишь термином, объединяющим форматы (формы организации), отличные от текста. Могут включать в себя разнообразные элементы, такие как машинный (или иной исполняемый) код, числовые данные, условные коды, 
битовые карты, местоположение других данных (смещения, а также указатели в оперативной памяти), фрагменты текста (см. выше), сжатые и случайные данные.


    _Типы и иерархия данных в программировании_

Традиционный подход к данным в программировании основан на понятии типа данных. 
В объектно-ориентированном программировании понятие типа обобщается до класса, 
элементами которого являются объекты. Данные объектов могут обрабатываться функциями, 
как класса, которому принадлежат сами, так и функциями других объектов, имеющими для этого возможность.

Хотя с логической точки зрения данные для вычислительных систем хранятся в виде битов 0 и 1, 
однако на физических носителях эти биты могут иметь разную физическую природу.

          

----------------------------------------------------------------------

  _Абстракция (информатика),

  Область компьютерных наук с момента своего образования столкнулась с проблемами, связанными со сложностью 
программных систем. Ранее проблемы сложности решались разработчиками путём правильного выбора структур данных, 
разработки алгоритмов и применения концепции разграничения полномочий. 
  Фундаментальные принципы этой области неупорядоченно применялись пионерами разработки ПО начиная 
с середины 1980-х. Первые попытки осознать и объяснить программную архитектуру системы были полны неточностей 
и страдали от недостатка организованности, часто это была просто диаграмма из блоков, соединенных линиями. 
В 1990-е годы наблюдается попытка определить и систематизировать основные аспекты данной дисциплины. 

Основополагающей идеей дисциплины программной архитектуры является идея снижения сложности системы путём 
a)абстракции и б)разграничения полномочий. 
На сегодняшний день до сих пор нет согласия в отношении чёткого определения термина «архитектура программного 
обеспечения


  В программной инженерии и информатики , абстракция является:

  Процесс удаления физических, пространственных или временных деталей или атрибутов чтобы сосредоточить 
внимание на более важных деталях; 

  Абстракция, в общем , является фундаментальным понятием в информатике и разработке программного обеспечения.

  Абстракции могут также относиться к объектам и системам реального мира, правилам вычислительных систем 
или правилам языков программирования, которые несут или используют особенности самой абстракции, такие как:
использование типов данных для выполнения абстракции данных, чтобы отделить использование от рабочих 
представлений структур данных в программах;
концепция процедур, функций или подпрограмм, которые представляют собой особенности реализации потока 
управления в программах.

------------------------------------------------------------------------------


  Абстрактный тип данных     

  Абстра́ктный тип да́нных (АТД) — это математическая модель для типов данных, где тип данных определяется 
поведением (семантикой) с точки зрения пользователя данных, а именно в терминах возможных значений, 
возможных операций над данными этого типа и поведения этих операций.

  Формально АТД может быть определён как множество объектов, определяемое списком компонентов 
(операций, применимых к этим объектам, и их свойств). Вся внутренняя структура такого типа спрятана 
от разработчика программного обеспечения — в этом и заключается суть абстракции. 
  Абстрактный тип данных определяет набор функций, независимых от конкретной реализации типа, 
для оперирования его значениями. Конкретные реализации АТД называются структурами данных.

  В программировании абстрактные типы данных обычно представляются в виде интерфейсов, которые скрывают 
соответствующие реализации типов. 
  Программисты работают с абстрактными типами данных исключительно через их интерфейсы, поскольку 
реализация может в будущем измениться. 
  Такой подход соответствует принципу инкапсуляции в объектно-ориентированном программировании. Сильной 
стороной этой методики является именно сокрытие реализации. Раз вовне опубликован только интерфейс, 
то пока структура данных поддерживает этот интерфейс, все программы, работающие с заданной структурой 
абстрактным типом данных, будут продолжать работать. Разработчики структур данных стараются, не меняя 
внешнего интерфейса и семантики функций, постепенно дорабатывать реализации, улучшая алгоритмы по скорости, 
надёжности и используемой памяти.

  Различие между абстрактными типами данных и структурами данных, которые реализуют абстрактные типы, 
можно пояснить на следующем примере. 
  Абстрактный тип данных список может быть реализован при помощи массива или линейного списка с использованием 
различных методов динамического выделения памяти. Однако каждая реализация определяет один и тот же набор функций, 
который должен работать одинаково (по результату, а не по скорости) для всех реализаций.

  Абстрактные типы данных позволяют достичь модульности программных продуктов и иметь несколько альтернативных 
взаимозаменяемых реализаций отдельного модуля.

Примеры АТД:

Список
Стек
Очередь
Ассоциативный массив
Очередь с приоритетом



-------------------------------------------------------------------

  Что такое ядро языка?

Cтандарт С++ состоит из двух основных частей: описание ядра языка и описание стандартной 
библиотеки. Данные обьектов могут обрабатываться функциями, как класса,которому
принадлежат сами,так и функциями других обьектов,имеющими для этого возможность

Си учить проще всего, потому что в нём вообще ничего нет, в отличие от других языков.
Он даже выводить ничего не может по умолчанию, для этого нужно подключать библиотеку.
И это очень и очень хорошо, потому что не каждая программа обязана чтото выводить.
Си лучший язык.

__________________________________________________________________________________________



























_____________________________________________________________________

  =======>> _Объе́ктно-ориенти́рованное программи́рование (ООП) <<======


  Объе́ктно-ориенти́рованное программи́рование (ООП) — методология программирования, основанная на представлении 
программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, 
а классы образуют иерархию наследования[1].

  Класс — в объектно-ориентированном программировании, представляет собой шаблон для создания объектов, 
обеспечивающий начальные значения состояний: инициализация полей-переменных и реализация 
поведения функций или методов. 
Класс является ключевым понятием в ООП. 

  Объе́кт в программировании — некоторая сущность в цифровом пространстве, обладающая определённым 
состоянием и поведением, имеющая определённые свойства (атрибуты) и операции над ними (методы). 
Как правило, при рассмотрении объектов выделяется то, что объекты принадлежат одному или нескольким классам, 
которые определяют поведение (являются моделью) объекта. 
Термин объект в программном обеспечении  применялся для моделирования реальности.

  Практически класс может пониматься как некий шаблон, по которому создаются объекты — экземпляры данного класса. 
Все экземпляры одного класса созданы по одному шаблону, поэтому имеют один и тот же набор полей и методов.
  Таким образом, программа представляет собой набор объектов, имеющих состояние и поведение. 
Объекты взаимодействуют посредством сообщений. Естественным образом выстраивается иерархия 
объектов: программа в целом — это объект, для выполнения своих функций она обращается к входящим 
в неё объектам, которые, в свою очередь, выполняют запрошенное путём обращения к другим объектам программы. 


  Идея классов пришла из работ по используемые человеком классификации в зоологии, ботанике, химии, деталях машин, 
несут в себе основную идею, что любую вещь всегда можно представить частным случаем некоторого более общего понятия. 
Конкретное яблоко — это в целом некоторое яблоко, вообще яблоко, а любое вообще яблоко — фрукт. 
(Яблоки и груши - частый пример классов в учебных пособиях по объектно-ориентированному программированию.)

Основные принципы структурирования в случае ООП:

* абстракция для выделения в моделируемом предмете важного для решения конкретной задачи
* инкапсуляция для быстрой и безопасной организации собственно иерархической управляемости: 
чтобы было достаточно простой команды «что делать», без одновременного уточнения как именно делать, 
так как это уже другой уровень управления;
* наследование для быстрой и безопасной организации родственных понятий: чтобы было достаточно на каждом 
иерархическом шаге учитывать только изменения, не дублируя всё остальное, учтённое на предыдущих шагах;
* полиморфизм для определения точки, в которой единое управление лучше распараллелить или наоборот — собрать воедино.

------------------------------------------------------------------------------------


Определение класса на языке Python с помощью оператора class:

class MyClass:
      def __init__(self, arg):
          """Конструктор"""
          self._arg = arg    # параметр объекта

      def method1(self, x):
          """метод, входящий в интерфейс класса"""

      def _method2(self, x):
          """метод, не входящий в интерфейс класса"""

      def __method2(self, x):
          """метод доступный только внутри класса"""

      @staticmethod
      def method3(arg1, arg2, ...):
          """статический метод, доступный для вызова как из экземпляров класса, так и из самого класса"""

      @classmethod
      def method4(cls, arg1, arg2, ...):
          """метод класса, доступный для вызова как из экземпляров класса, так и из самого класса, 
          с доступом к внутренним методам и параметрам"""



Создание экземпляра класса:

myinstance = MyClass(4)

------------------------------------------------------------

Определение класса на языке JavaScript с помощью оператора class:

class MyClass {
    constructor(arg1, arg2, ...) {
        //конструктор (необязателен)
        this.arg1 = arg1;
        this.arg2 = arg2;
    }

    method1() {
        // Обычный метод
    }

    static method {
        // Статический метод
    }
}

Создание экземпляра класса:

var myinstance = new MyClass(4, 2)

-------------------------------------------------------

Каждый класс в Java как правило создается в отдельном файле, имя файла должно соответствовать 
названию класса. В данном случае это будет MyClass.java

Определение класса на языке Java с помощью оператора class:


  class MyClass {
      String name = "Example";
      
      // "Конструктор"
      public MyClass(String name) {
          this.name = name;
      }
      
      // "Метод" 
      public String getName() {
          return name;
      }
  }

Создание экземпляра класса:

  MyClass my = new MyClass("Example 2");

_________________________________________________________________________________________









>>>	CRUD

	CRUD — акроним, обозначающий четыре базовые функции, используемые при работе с базами данных : 
>	Cоздание (create), 
>	чтение (read), 
>	модификация (update), 
>	удаленение

--------------------------------------------------

#!/bin/sh — выполнить файл с помощью sh (Bourne shell) или
другой совместимой оболочки;
#!/bin/csh -f — выполнить файл с помощью csh (C shell) 
#!/usr/bin/perl -T — выполнить файл при помощи Perl в режимеTaint checking;
#!/usr/bin/env python3 — выполнить файл как программу на
Python, используя env для получения пути к файлу интерпретатора

*********************************************************************************



















































                

███████╗██╗   ██╗███████╗████████╗███████╗███╗   ███╗
██╔════╝╚██╗ ██╔╝██╔════╝╚══██╔══╝██╔════╝████╗ ████║
███████╗ ╚████╔╝ ███████╗   ██║   █████╗  ██╔████╔██║
╚════██║  ╚██╔╝  ╚════██║   ██║   ██╔══╝  ██║╚██╔╝██║
███████║   ██║   ███████║   ██║   ███████╗██║ ╚═╝ ██║
╚══════╝   ╚═╝   ╚══════╝   ╚═╝   ╚══════╝╚═╝     ╚═╝
                                                     
______________________________________________________________________________

        ===============>>_Операционные системы <<==============
______________________________________________________________________________




  Операционные системы можно рассматривать с двух точек зрения: в качестве менед- 
жеров ресурсов и в качестве расширенных машин. С точки зрения менеджера ресурсов  
работа операционных систем заключается в эффективном управлении различными  
частями системы. С точки зрения расширенной машины работа операционных систем  
состоит в предоставлении пользователям абстракций, более удобных в использовании  
по сравнению с реальным компьютером. В число таких абстракций включаются про- 
цессы, адресные пространства и файлы
  Базовыми понятиями, на которых строятся все операционные системы, являются про- 
цессы, управление памятью, управление вводом-выводом данных, файловая система  
и безопасность. 
  Основой любой операционной системы является набор системных вызовов, которые  
она способна обработать. Они говорят о том, что реально делает операционная система.  
Мы рассмотрели четыре группы системных вызовов для UNIX. 
* созданию и прекращению процессов. 
* чтения  и записи файлов. 
* управления каталогами. 
* системные вызовы различного назначения. 
Операционные системы могут иметь различную структуру. Наиболее распространен- 
ными являются монолитная система, многоуровневая система, микроядро, клиент- 
серверная система, виртуальная машина и экзоядро.

  
>> Системные вызовы. book Ken Tompson

  Операционная система предоставляет собой набор служб для работающих в ней программ:
    * Запуск и остановка программ
    * Чтение и Запись в Файл
    * Доступ к устройсвом и Сетевые подключения

По сути Системные вызовы и есть Операционная Система:

    fd = creat(filename, perms)
    fd = open(filename, mode)
    nread = read(fd, buf, n)
    nwrite = write(fd, buf, n)
    status = close(fd)

>>>> Коммандная Оболочка 

  Функции Оболочки:
    * Запуск Программ
    * Перенаправление ввода/вывода ($ имя программы > выходной файл)




>>>>>Конвейеры

  Конвейеры - важный механизм, соединяющий вывод одной программ выводом другой.
  
  ls  | wc
  who | wc
  who | grep joe
  who | grep joe | wc

---------------------------------------------------




                ____________________
               |                    |
               |    Applications    |
               ______________________
               ___________|__________
              |                      |
              |        Kernel        |
              |______________________|
                 |        |       |
              ___|__    __|__   __|___
             |      |  |  |  | |      |
             | CPU  |  | RAM | |Device|

 


-----------------------------------------------------------------------------------

  Особенности UNIX

  Основное отличие Unix-подобных систем от других операционных систем заключается в том, 
что это изначально многопользовательские многозадачные системы. В Unix может одновременно работать 
сразу много людей, каждый за своим терминалом, при этом каждый из них может выполнять множество 
различных вычислительных процессов, которые будут использовать ресурсы именно этого компьютера.

  Вторая колоссальная заслуга Unix — в её мультиплатформенности. Ядро системы разработано таким образом, 
что его легко можно приспособить практически под любой микропроцессор

  Unix имеет и другие характерные особенности:
• использование простых текстовых файлов для настройки и управления системой;
• широкое применение утилит, запускаемых из командной строки;
• взаимодействие с пользователем посредством виртуального устройства — терминала;
• представление физических и виртуальных устройств в виде файлов;
• использование конвейеров из нескольких программ, каждая из которых выполняет одну задачу.

  Некоторые архитектурные особенности ОС Unix:
👉Команда командной строки есть не более чем имя файла программы, 
не требуется специальная регистрация и специальная разработка программ
как команд (что являлось обычной практикой в RSX-11, RT-11)

  Применение

  В настоящее время Unix-системы распространены в основном среди серверов, а также как встроенные 
системы для различного оборудования, включая смартфоны. Также Unix-системы доминируют на суперкомпьютерах, 
в частности, на 100 % суперкомпьютеров из рейтинга TOP500 установлена ОС Linux.

-------------------------------------------------------------------------------


  >_Майк Ганцарз: Философия Unix (член команды X Window System) 

• Красиво — небольшое.
• Пусть каждая программа делает что-то одно, но хорошо.
• Стройте прототип программы как можно раньше.
• Предпочитайте переносимость эффективности.
• Храните данные в простых текстовых файлах.
• Извлекайте пользу из уже существующих программных решений.
• Используйте скриптовые языки для уменьшения трудозатрат и улучшения переносимости.
• Избегайте пользовательских интерфейсов, ограничивающих возможности пользователя по взаимодействию с системой.
• Делайте каждую программу «фильтром».

   Менее важные 10 принципов не снискали всеобщего признания в качестве частей философии Unix:

• Позвольте пользователю настраивать окружение.
• Делайте ядра операционной системы маленькими и легковесными.
• Используйте нижний регистр и придерживайтесь кратких названий.
• Не храните тексты программ в виде распечаток («Спасите деревья!»).
• Не сообщайте пользователю об очевидном («Молчание — золото»).
• Разбивайте сложные задачи на несколько простых, выполняемых параллельно («Мыслите „параллельно“»).
• Объединённые части целого есть нечто большее, чем просто их сумма.
• Ищите 90-процентное решение.
• Если можно не добавлять новую функциональность, не добавляйте её («Чем хуже, тем лучше»).
• Мыслите иерархически.

******************************************************************















































___________________________________________________________________



███╗   ██╗███████╗████████╗██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗
████╗  ██║██╔════╝╚══██╔══╝██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝
██╔██╗ ██║█████╗     ██║   ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ 
██║╚██╗██║██╔══╝     ██║   ██║███╗██║██║   ██║██╔══██╗██╔═██╗ 
██║ ╚████║███████╗   ██║   ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗
╚═╝  ╚═══╝╚══════╝   ╚═╝    ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
                                                              

_______________________________________________________________________________

            ==============>> computer_network <<=============
_______________________________________________________________________________



Распределения протоколов по уровням модели OSI

       TCP/IP            OSI
  _________________________________
7                   | Прикладной   |      напр: HTTP,SMTP,SNMP,FTP,Telnet,SSH,SCP,SMB,NFS
                    |______________|           
6  Прикладной       | Представления|      напр: XDR,AFP,TLS,SSL
                    |______________|              
5                   | Сеансовый    |      напр: RPC,NetBIOS,PPTP,L2TP,ASP
  __________________|______________|
                    |              |
4  Транспортный     | Транспортный |      напр: TCP,UDP,SCTP,SPX,ATP,DCCP,GRE
  __________________|______________|
                    |              |
3  Cетевой          | Сетевой      |      напр: IP,ICMP,IGMP,CLNP,OSPF,RIP,IPX,DDP,ARP  
  __________________|______________|
                    | Канальный    |      напр: Ethernet,Token ring, HDLC,PPP, ISDN, ATM
2                   |______________|
   Канальный        |              |
1                   | Физический   |      напр: электрические провода, радиосвязь, оптоволокно, ИК
  __________________|______________|

-----------------------------------------------------

Dhcp сервер не отвечает
//службы*dns клиент* перезагрузка' режим авто

// net settings:    192.168.8.1
Алтер dns:          8.8.8.8
Предп dns:          8.8.4.4

// антивирус and брэндмауер

// очистить кэш dns:
Cmd.com * ipconfig/flushdns
                      ipconfig/registerdns
                      Ipconfig/renew
                      ipconfig/release

******************************************************************





































































______________________________________________________________________________________



 █████╗ ██████╗  ██████╗██╗  ██╗██╗████████╗███████╗ ██████╗████████╗██╗   ██╗██████╗ ███████╗
██╔══██╗██╔══██╗██╔════╝██║  ██║██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗██╔════╝
███████║██████╔╝██║     ███████║██║   ██║   █████╗  ██║        ██║   ██║   ██║██████╔╝█████╗  
██╔══██║██╔══██╗██║     ██╔══██║██║   ██║   ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗██╔══╝  
██║  ██║██║  ██║╚██████╗██║  ██║██║   ██║   ███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║███████╗
╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝

_______________________________________________________________________________________________________

                   ===============>>> architecure_ЭВМ <<<==================
_______________________________________________________________________________________________________




Wikipedia/Компьютер

  Электро́нно-вычисли́тельная маши́на (сокращённо ЭВМ) — комплекс технических, аппаратных и программных средств, предназначенных для автоматической обработки информации, вычислений, автоматического управления. 

 [101] Определение компьютера буквально: 

     « Устройство, которое вычисляет , особенно программируемая [обычно] электронная машина, которая выполняет
      высокоскоростные математические вычисления. логические операции или которые собирают, хранят, 
     и обрабатывают информацию ». [ Арифметико-Логичесские операции ]
-------------------------------------------------------------------


  Компью́терная програ́мма — комбинация компьютерных инструкций и данных, позволяющая аппаратному 
обеспечению вычислительной системы выполнять вычисления или функции управления 

  Чаще всего образ программы хранится в виде исполняемого модуля (отдельного файла или группы файлов). 
Из этого образа, находящегося, как правило, на диске, исполняемая программа в оперативной памяти может 
быть построена программным загрузчиком.

  В системном программировании программой называются данные, которые используются процессором как инструкции 
по управлению компьютерной системой[5]. В состав программы может входить как машинный код, исполняемый 
процессором для достижения некоторой цели, так и необходимые для этого данные. Отличительной особенностью 
программы является её нахождение в памяти и исполнение процессором.

  Интерпретируемые программы, для которых, как правило, не применяется процесс компиляции и 
которые интерпретируются операционной системой или специальными программами-интерпретаторами, 
называются скриптами или «сценариями».

--------------------------------------------------------------






  Архитекту́ра компью́тера (материал из Википедии) — набор типов данных, операций и характеристик каждого 
отдельно взятого уровня. Архитектура описывает общую модель компьютера.
Выделяют несколько уровней организации компьютера (компьютерной архитектуры), от двух и более:

Уровень 0
Цифровой логический уровень, это аппаратное обеспечение машины, состоящий из вентилей. См. Логические элементы
Уровень 1
Микроархитектурный уровень, интерпретация (микропрограммы) или непосредственное выполнение. 
Электронные схемы исполняют машинно-зависимые программы. Совокупность регистров процессора 
формирует локальную память. См. арифметико-логическое устройство.
Уровень 2
Уровень архитектуры системы команд, трансляция (ассемблер).
Уровень 3
Уровень операционной системы, трансляция (ассемблер). См. виртуальная память, файлы.
Уровень 4
Уровень языка ассемблера, трансляция (компилятор). Четвертый уровень и выше используется для написания прикладных программ, с первого по третий — системных программ. Программы в удобном для человека виде транслируются на язык 
уровней 1-3.
Уровень 5
Язык высокого уровня. Программы на языках высокого уровня транслируются обычно на уровни 3 и 4.
------------------------------

По принципу разделения памяти
Гарвардская архитектура — характерной чертой является разделение памяти программ и памяти данных.
Фон Неймановская архитектура — характерной чертой является совместное хранение программ и данных.


Схема, иллюстрирующая многоуровневую структуру компьютера:

                    _____________________________________________
                     |  Прикладные программы       |
                     |_____________________________|
 ______________________________|_____________________________
|                    | Дополнительное системное ПО |
|                    |_____________________________|
|        ______________|_____________________________|
|         |              | Пользовательское окружение  |   Программное 
| Cистемное     | Операционная |_____________________________|   обеспечение
| програмное  |  система     |_____________________________|      
| обеспечение   |              |  Ядро операционной системы  |
|       |______________|_____________________________|
|                |_____________________________  
|                  |   Встроенное программное    |
|______________________________|____обеспечение(firmware)____|________________
                  ______________________________________________
                 | Архитектура системы команд  |
                 |_____________________________|
                 |_____________________________ 
                 |  Микропрограмма(микрокод)   |   Аппаратная
                 |_____________________________|   платформа
                   |_____________________________ (Архитектура
                 |     Микроархитектура    |   компьютера)  
                               |_____________________________|________________
                                _____________________________
                               | Цифровой логический уровень |
                               |_____________________________|
                                _____________________________
                               |  Физические устройство      |
                               |_____________________________|

--------------------------------------------------------------------------------------

eng.Wikipedia/Computer

  Определение компьютера буквально: « Устройство, которое вычисляет , особенно программируемая
[обычно] электронная машина, которая выполняет математические вычисления. логические операции 
или которые собирают, хранят,и иным образом обрабатывают информацию ».

  При помощи вычислений компьютер способен обрабатывать информацию по определённому алгоритму. 
Решение любой задачи для компьютера является последовательностью вычислений.


-----------------------------------------------------------------------------------------

>>>>> Архитектура фон Неймана

  Архитектура фон Неймана (модель фон Неймана, Принстонская архитектура) — широко известный 
принцип совместного хранения команд и данных в памяти компьютера.

  Принципы фон Неймана:
  Принцип однородности памяти
Команды и данные хранятся в одной и той же памяти и внешне в памяти неразличимы. 
Распознать их можно только по способу использования; то есть одно и то же значение 
в ячейке памяти может использоваться и как данные, и как команда, и как адрес 
в зависимости лишь от способа обращения к нему. Это позволяет производить над командами 
те же операции, что и над числами, и, соответственно, открывает ряд возможностей. 
Так, циклически изменяя адресную часть команды, можно обеспечить обращение 
к последовательным элементам массива данных. Такой приём носит название модификации команд
и с позиций современного программирования не приветствуется. Более полезным является другое 
следствие принципа однородности, когда команды одной программы могут быть получены как 
результат исполнения другой программы. Эта возможность лежит в основе трансляции — перевода текста 
программы с языка высокого уровня на язык конкретной вычислительной машины

-------------------------------------------------------------------------------

  Концепции микроархитектуры
В общем случае, все ЦПУ, одночиповые микропроцессоры и многочиповые реализации выполняют программы, 
производя следующие шаги:

* Чтение инструкции и её декодирование
* Поиск всех связанных данных, необходимых для обработки инструкции
* Обработка инструкции
* Запись результатов

--------------------------------------------------------------------------



        _____________
       |            |
       |            |
       |  ЦПУ       |
       |____________|


     ______________________
    |                      |  
    |  Северный мост       |
    |  (контроллер-        |
    |  концентратор памяти)|
    |______________________|



 _______________________________
|                               |
|   Южный моcт                  |
| (контроллер-                  |
| концентратор     IDE          |
| ввода-вывода)    Sata         | 
|                    USB        |
|          Ethernet             |        
|          Audio ППЗУ           |
|_______________________________|


                   __________________
                 
 ___________           Super I/O 
|           |          контроллер
|  ППЗУ     |         [клавиатура, мышь]
|  (BIOS)   |
|___________|


_________________________________________________________





®что в компьютере?
---------------------------------------
     Пользовательские программы                 Java,C#,Python,JS
_______________________________________
Языки            |
Программирования |  Библиотеки программ         С, C++
_______________________________________

     Операционная система                       С, С++
_______________________________________
      Драйверы устройств                        С 
  |__||__||__||__||__||__||__|
        Комьютер(hardware)



******************************************************************







































































































 +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+
 |L|e|g|e|n|d| |p|r|o|g|r|a|m|m|i|n|g|
 +-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+-+-+-+



Legend_Developers = [ 
Деннис Ритчи, Кен Томпсон
Бьёрн Страуструп
Гвидо Ван-Россум
Брендан Эйх
Джеймс Гослинг
{} 
Линус Торвольдс
Эрик Рэймонд, 
Ричард Столлман
]




-------------------------

--> Последние модели современной нейробиологии рассматривают мозг как 
биологичесский компьютер, который очень отличаються по механизму от
электронного компьютера, но похож в том смысле, что он получает
информацию из окружающего мира, хранит ее обрабатывает различными способами. 


-------------------------------------------------------------------

#Эрик Рэймонд  http://volgograd.lug.ru/library/hacker-howto.ru.html

1. Научитесь программировать.
Лучше всего, на самом деле, выучить все четыре этих языка [shell, Python, C/C++, Perl, и LISP]
Я не могу дать здесь развернутые инструкции относительно того, 
как научиться программировать, - это сложное искусство.
Но я могу сказать вам, что книги и курсы этому не научат (многие, возможно, большинство лучших хакеров - 
это самоучки).Что на самом деле может научить программированию, так это: 

  (а) Чтение исходного кода 
  (б) Написание Исходного кода.
  
  Научиться программировать - это как научиться писать хорошим естественным языком. 
Самый лучший способ для этого - почитать что-то из написанного признанными мастерами
литературы, затем написать немного самому; прочесть побольше, 
написать немного побольше; прочитать еще больше, написать еще побольше...
И повторять этот процесс до тех пор, пока ваши программы не разовьются в нечто 
мощное и экономичное.
--
2. Достаньте один из вариантов Unix в исходных текстах,
научитесь его использовать и с ним работать.
Единственный и самый важный шаг, который любой из новичков может
предпринять для приобретения хакерских навыков, - это раздобыть
копию Linux или одной из версий BSD-Unix, установить ее на своём компьютере,
и использовать её.
Да, в мире есть и другие операционные системы помимо Unix. 
Но их распространяют в скомпилированных машинных кодах - вы не сможете
легко изучать эти коды, и тем более не сможете их модифицировать.
Учиться хакерству на машинах, работающих под DOS,
Windows или MacOS - это все равно что учиться танцевать,
будучи полностью загипсованным.
--
3. Научитесь использовать World Wide Web и писать на HTML
--
4. Если вы не знаете Английский, изучите его

-------------------------------------------------------------------


#Just for fun | linus torvolds:
  Итак, я потратил на Sinclair QL почти две тысячи долларов. И писал для него одну 
  программу за другой. Я ВСЕ ВРЕМЯ ИСКАЛ ВСЯКИЕ ИНТЕРЕСНЫЕ ЗАДАЧИ.
  На первом году моей учебы в университете Sinclair QL стоял у меня на столе возле окна
  (мы жили тогда на первом этаже, на Петерсгатан), но программированием я особо не  занимался.
  Отчасти потому, что не смог  найти задачу, которую можно было бы делать на компьютере. 
  Когда нет интересной задачи, и желание программировать пропадает.
  Всегда нужен какой-то стимул

*********************************************************************


«Важно рассматривать знания как семантическое дерево, — говорит Маск.
— Сначала разберитесь с фундаментальными принципами — это ствол и большие ветки вашего дерева.
Только потом переходите к листьям (подробностям). Иначе им не на чем будет висеть» (Илон Маск)


--------------------------------------------------------------

Благодаря GitHub и Stackoverflow программирование становится похоже на конструктор LEGO: 
на сайте можно взять необходимые для создания нового IT-продукта детали и доработать их, 
сэкономив время на написание исходного программного кода. Оттого GitHub часто называют 
социальной сетью для программистов и разработчиков

--------------------------------------------------
Рэймонд: Хакеры создают вещи, взломщики ломают их
--------------------------------------------------
---------
  Хорошие программисты знают, что можно написать; а великие знают, что можно переписать.
Я не претендовал на великого программиста, а попытался его имитировать.
Характерная черта великих - это их Лень.
Они знают, что судят не по усилиям, а по результатом.
Почти всегда легче начать с чего то сделанного, чем с нуля.
Линус Торвольдс например не пыталс янаписать свою систему с нуля. 
Он начал использовать идеи и исходники от Minix, 
небольшой Unix-подобной системы для 386 машин.

  Почти весь исходный текст Minix был переписан,
однако он послужил основой для того что позже стал Linuxом.
Действуя в том же духе я начал искать существуюшию POP утилиту, 
чтобы использовать ее как основу для разработки.

  В мире Unixa всегда существовало традиция делать исходные тексты 
открытыми и дружественными к повторному использованию кода. 
Именно поэтому проект GNU выбрал UNIX как основную операционную систему. 
Мир Linux'a полностью перенял эту традицию. Здесь вы можете найти терабайты 
исходных текстов, и поэтому шансов найти что нибудь подходящее в мире Linux'a выше, 
чем где бы то ни было.
---------------------------------------------------------------------------------


«Важно рассматривать знания как семантическое дерево, — говорит Маск. — 
Сначала разберитесь с фундаментальными принципами — это ствол и большие ветки вашего дерева. 
Только потом переходите к листьям (подробностям). Иначе им не на чем будет висеть».(Илон Маск)


---------------------------------------------------------

  Интервью Б.Страуструп, Создатель ЯП С++

  Что вы посаветуете студенту, изучающему информатику?:
  Будьте любопытны - усвойте фундаментальные знания во время учебы. Даже если сейчас это не 
кажется вам актуальным. Вы можете оказаться в потенциальной и захватывающей ситуации, когда 
вам нужно применить полученные знания на практике. 
  В США люди с раннего возраста очень целеустремленны. Они точно знают какие образования, 
работу и курсы им нужно получить, чтобы достич своих целей. Это не обезательно плохо, 
но по моему опыту карерный роcт может развиваться и вести вас в непредвиденных направлениях. 
Если вы не останетесь любопытными, вы можете упустить возможности на своем пути.
Вы не знаете чем будете заниматьяся через десять лет, но вы можете улучшить свой набор инстрементов, 
>>ИЗУЧИТЬ ФУНДАМЕНТАЛЬНЫЕ КОНЦЕПЦИИ и МЕТОДЫ, например, машинную архитектуру, алгоритмы и структуры данных, 
операционные системы и сети. И математика...

-----------------------------------------------------------

  Интервью Б.Страуструп, Создатель ЯП С++
Что отличает специалиста по CS, создающего приложение, от профеионала в какой-либо другой облати
(например медицины или физики) создающей его? Ответ должен быть >> Владение ядром CS <<

  Каким должно быть это ядро?:

Он будет содержать большую часть установленных алгоритмов учебной программы CS, Cтруктур данных, 
машинной архитектуры, программирования(принципиального), некоторой математики и операционной системы 
и компьютерные сети а также базы данных
-------------------------------------------------------------------------------------





















__________________________________________________________________

              📌 🄸🄽🄵🄾🅁🄼🄰🅃🄸🅀🄰 🄰🄽🄳 🄰🄻🄶🄾🅁🄸🅃🄷🄼🅂/🄳🄰🅃🄰 🅂🅃🅁🅄🄲🅃🅄🅁🄴
             _______________________________________________________________________________


Информáтика (фр. Informatique; англ. Computer science) — наука о методах и процессах [сбор, создание,
хранения, обработки, передачи, кодирование, анализа, ввод/вывод, чтение/запись] >> числовой, текстовой, 
графической, звуковой, видео информации/данных с применением компьютерных технологий, обеспечивающих 
возможность её использования для принятия решений [информатика ученые site:google.com]        
```````      
>_Предметом изучения информатики являются именно  <'Данные'> методы их создания, хранения, обработки и передачи
>_Данные — поддающееся многократной интерпретации представление информации в пригодном для обработки или передачи 
>_Фу́нкция(действие) или алгоритмы — фрагмент программного кода, к которому можно обратиться из другого места программы
>_Для управление сложностями системы используеться >> Алгоритмы и Структуры Данных, События, Данные и Функция, 
OOP[class, object]{свойство и методы}, Абстракция, Файлы, Документация, Cистемный подход, 20/80
-------------------------------------------------------------------------------
            🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂
-------------------------------------------------------------
 programming  = Инструкция и Данные 
                [ algorithms and data structure ]
                [ syntax lang: функция, ветвление, цикл ] 
                [ library ]
                - - - - - -                             
inst:  [ unix-shell, python, html, js, xml, java, sql ]> tcp/ip >> C++             
-----------------------------------------------------------------------

---------------------------------------------------
system  =  [
                kernel* [ Cистемные вызовы, микропрограммы ]
                system library [ .dll, .so ] | [ .py, .pyc]
                shell  and utils    
                    ————————————————————

  OS: [ 'Linux' 'Android' 'Windows' 'ChromeOS' 'RouterOS' ]
 *[ Cистемные вызовы, Драйверы, Процессы и потоки, Демоны, 
 Управление памятью, Многозадачность, Файлы и Файловые системы,           
  Ввод и вывод информации(I/O), Виртуализация и Облако ]
--------------------------------------------------

----------------------------------------------------------
net   =   [   model OSI, model TCP/IP  ]
              ——————————————————————               
        inst: aktiv: [ 'net adapter' 'router' 'switch' 'hub' 'repeater' ]
        passive: ['UTP'  'FTP'  'Optic Cable']
--------------------------------------------------------------------

-------------------------------------------------------------------------
• Architecture ЭВМ   =   [
                       1| Цифровой логический уровень это аппаратное обеспечение машины, состоящий из вентилей;
                       2| Микроархитектурный уровень;
                       3| Уровень архитектуры системы команд, трансляция (ассемблер);
                       4| Уровень операционной системы, трансляция (ассемблер);
                       5| Уровень языка ассемблера, трансляция (компилятор);
                       6| Язык высокого уровня
  [CPU, RAM, HDD, GPU, motherboard] ] [Арифметика-Логичесские операции]——————————————————
 Фон Неймановская архитектура —  характерной чертой является совместное хранение программ и данных

-------------------------------------------------------------------------

* [  'motix' 'google' 'wikipedia' 'gnu.org' 'android.com' 'github'  'stackexcange'  'python.org' 
        'developer.mozilla.org' 'html5book.ru' 'discovery' 'natgeowild' 'nasa' 'who.int' ]
* [  'Terminal' 'Sublime Text' 'VirtualBox' 'MS Office'  'Adobe' 'ChromeOS' 'Autodesk', 'Apache' 'СУБД' 
        post: ['Outlook' 'sendmail' 'Excenge Server' ] 'Google and YandeX service' ]
* [  'file server' 'web server' 'post server' 'client-server' 'database' ] 

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     Большинству программистов, интересен только самый верхний уровен,который меньше всего сходен с 
машинным языком. Однако те, кто хочет понять, как работает компьютер,должны изучить все уровни.(Э.Таненбаум) 
==>> Можно обучиться конкретному языку и инструментам, а потом всю жизнь фильтровать резюме по куче ключевых слов. 
А можно понять основные алгоритмы программ -[Информационные процессы над данными]-, структуры, конструкции
и тогда все языки будут восприниматься только с точки зрения удобства применения под конкретную задачу.
Когда научитесь выстраивать свое мышление в виде алгоритмов >> то язык программирование будеть всего лишь инструментом
Программирование == не в синтаксисе языка, а именно в Алгоритмах и Структуры данных (Т.Хирьянов, Н.Вирт)
Алгоритмы + Структуры данных = Программа (Н.Вирт) [чтение и запись исходного кода (Э.Рэймонд)]_________
Программист в первую очередь должен уметь анализировать и решать проблемы – это основной навык, которым должны обзавестись выпускники факультетов информатики. Написание кода – это просто необходимый инструмент, 
который используется для решения задач
==>> ядро info = [Algorithms and Data structure, arhitecture ЭВМ, system and network] (Б.Cтраутруп C++)
==>> Важный ресурс программиста = Концентрация внимания | Решение => ООП 
 __________________Важно! Надо изучить _задачу_ а не инструмент ________________
___________________________________________________________________________________________


*******************************************************************

  Обработка информации                          Сбор информации        
                  \                           /
                   \ _______________________ /

                |🄸🄽🄵🄾🅁🄼🄰🅃🄸🄾🄽 🄿🅁🄾🄲🄴🅂🅂|
                     _______________________ 
                   /           |             \
                  /            |              \
  Хранение                Передача              Кодирование
  информации              информации            информации


******************************************************************

              📌Информатика
  Информация        |        Действие(обработка)
              Программирование
  Данные            |        Функция
              Структурирования
  Структуры данных  |        Алгоритмы 
              ООП{классы и обьекты}
  Свойство          |        Методы


******************************************************************


















__________________________________________________

    ============>> _books <<===============
__________________________________________________


Computer Science книги:
https://www.piter.com Издательский дом «Питер»
https://www.oreilly.com/  #sorax recommended


• Информатика. Базовый курс. Симонович С.В
• Информатика 10 Л.Л.Босова,A.Ю.Босова
• Информатика 5кл Р.А. Кадиркулов, Г.К. Нурмуханбетова
• Информатика 10кл. P.А. Кадиркулов, Г.К. Нурмуханбетова Алматы кiтап

• Алгоритмы и Структуры данных Тимофей Хирьянов  МФТИ - ФизТех www.mipt.ru
• Алгоритмы Вводный курс Томас.Х Кормен[2014]
• Укус Питона Swaroop C.Н[2013]
• Язык программирование Python Г.Россум, Ф.Л.Дж.Дрейк
• JavaScript Подробное руководство 6изд. Дэвид Флэнаган [2012 O'Reilly]
• Хакинг Искусство Эксплойта Джон Эриксон 2изд.[2018 Питер] 

• Компьютерные сети 5изд Э.Таненбаум, Д.Уэзеролл [2012 Питер]
• Компьютерные сети 5изд В.Олифер Н.Олифер [2016 Питер]
• Компьютерные сети Джеймс Куроуз, Кит Росс [2016 Москва]
• А.Cозыкин Компьютерные сети www.asozykin.ru

• Архитектура компьютера 6Изд Э.Таненбаум, Т.Остин 
• Современные операционные системы 4изд Э.Таненбаум Х.Бос [2015 Питер] 
Unix_и_Linux_Руководство_системного_администратора_5изд_2020
• Командная строка linux Уйльям Шоттс  [2017 Питер]
• Введение в Windows PowerShell Андрей Попов 
• Практическое руководство системного администратора 2изд [2013] Александр Кенин 
• Самоучитель системного администратора 5изд [2019] Кенин, Колисниченко



------infosec--------
https://hackware.ru/?p=6780
https://kali.tools/
https://tools.kali.org/tools-listing



-----------------------------------------------------------------


HeadHunter | Popular professii in IT:

• programming: [  python, js, java, html, php ]>>C++
• system and net admin: [ shell, windows, linux, TCP/IP, MS Office, Adobe]
                        [Joomla, Wordpress, вэб-сервер Apache]
• Database: [CУБД:  SQL]
• internet-marketing: [ SMM, SEO ]

******************************************************************






